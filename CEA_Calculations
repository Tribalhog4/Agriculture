import React, { useState } from 'react';
import { Card, CardHeader, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';

const GreenhouseLightingCalculator = () => {
  const [inputs, setInputs] = useState({
    lightOutput: 1000,
    powerConsumption: 600,
    costPerFixture: 350,
    targetPPFD: 225,
    greenhouseWidth: 25,
    greenhouseLength: 40,
    electricityCost: 0.12,
    hoursPerYear: 2400
  });

  const [results, setResults] = useState(null);

  const handleInputChange = (e) => {
    setInputs({
      ...inputs,
      [e.target.name]: parseFloat(e.target.value)
    });
  };

  const calculateResults = () => {
    const {
      lightOutput,
      powerConsumption,
      costPerFixture,
      targetPPFD,
      greenhouseWidth,
      greenhouseLength,
      electricityCost,
      hoursPerYear
    } = inputs;

    const areaLighting = greenhouseWidth * greenhouseLength;
    const wallPlugEfficacyUmolJ = lightOutput / powerConsumption;
    const wallPlugEfficacyMolKwh = wallPlugEfficacyUmolJ * 3.6;
    const coverageArea = lightOutput / targetPPFD;
    const fixturesRequired = Math.ceil(areaLighting / coverageArea);
    const purchaseCost = fixturesRequired * costPerFixture;
    const annualElectricityCost = (fixturesRequired * powerConsumption * hoursPerYear * electricityCost) / 1000;

    const fixturesPerRow = Math.ceil(Math.sqrt(fixturesRequired * greenhouseWidth / greenhouseLength));
    const fixturesPerColumn = Math.ceil(fixturesRequired / fixturesPerRow);

    setResults({
      areaLighting,
      wallPlugEfficacyUmolJ,
      wallPlugEfficacyMolKwh,
      coverageArea,
      fixturesRequired,
      purchaseCost,
      annualElectricityCost,
      fixturesPerRow,
      fixturesPerColumn
    });
  };

  const GreenhouseVisualization = ({ width, length, fixturesPerRow, fixturesPerColumn }) => {
    const scale = 400 / Math.max(width, length);
    const scaledWidth = width * scale;
    const scaledLength = length * scale;

    return (
      <svg width={scaledWidth} height={scaledLength} viewBox={`0 0 ${scaledWidth} ${scaledLength}`}>
        <rect width={scaledWidth} height={scaledLength} fill="none" stroke="black" />
        {[...Array(fixturesPerRow)].map((_, rowIndex) =>
          [...Array(fixturesPerColumn)].map((_, colIndex) => (
            <circle
              key={`${rowIndex}-${colIndex}`}
              cx={((rowIndex + 0.5) * scaledWidth) / fixturesPerRow}
              cy={((colIndex + 0.5) * scaledLength) / fixturesPerColumn}
              r={3}
              fill="yellow"
              stroke="orange"
            />
          ))
        )}
      </svg>
    );
  };

  return (
    <Card className="w-full max-w-2xl mx-auto">
      <CardHeader>
        <h2 className="text-2xl font-bold">Greenhouse Lighting Calculator</h2>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="grid grid-cols-3 items-center gap-4">
            <Label htmlFor="lightOutput">Light output (μmol/s):</Label>
            <Input
              id="lightOutput"
              type="number"
              name="lightOutput"
              value={inputs.lightOutput}
              onChange={handleInputChange}
              placeholder="Light output"
              className="col-span-2"
            />
          </div>
          <div className="grid grid-cols-3 items-center gap-4">
            <Label htmlFor="powerConsumption">Power consumption (W):</Label>
            <Input
              id="powerConsumption"
              type="number"
              name="powerConsumption"
              value={inputs.powerConsumption}
              onChange={handleInputChange}
              placeholder="Power consumption"
              className="col-span-2"
            />
          </div>
          <div className="grid grid-cols-3 items-center gap-4">
            <Label htmlFor="costPerFixture">Cost per fixture ($):</Label>
            <Input
              id="costPerFixture"
              type="number"
              name="costPerFixture"
              value={inputs.costPerFixture}
              onChange={handleInputChange}
              placeholder="Cost per fixture"
              className="col-span-2"
            />
          </div>
          <div className="grid grid-cols-3 items-center gap-4">
            <Label htmlFor="targetPPFD">Target PPFD (μmol·m⁻²·s⁻¹):</Label>
            <Input
              id="targetPPFD"
              type="number"
              name="targetPPFD"
              value={inputs.targetPPFD}
              onChange={handleInputChange}
              placeholder="Target PPFD"
              className="col-span-2"
            />
          </div>
          <div className="grid grid-cols-3 items-center gap-4">
            <Label htmlFor="greenhouseWidth">Greenhouse width (m):</Label>
            <Input
              id="greenhouseWidth"
              type="number"
              name="greenhouseWidth"
              value={inputs.greenhouseWidth}
              onChange={handleInputChange}
              placeholder="Greenhouse width"
              className="col-span-2"
            />
          </div>
          <div className="grid grid-cols-3 items-center gap-4">
            <Label htmlFor="greenhouseLength">Greenhouse length (m):</Label>
            <Input
              id="greenhouseLength"
              type="number"
              name="greenhouseLength"
              value={inputs.greenhouseLength}
              onChange={handleInputChange}
              placeholder="Greenhouse length"
              className="col-span-2"
            />
          </div>
          <div className="grid grid-cols-3 items-center gap-4">
            <Label htmlFor="electricityCost">Electricity cost ($/kWh):</Label>
            <Input
              id="electricityCost"
              type="number"
              name="electricityCost"
              value={inputs.electricityCost}
              onChange={handleInputChange}
              placeholder="Electricity cost"
              className="col-span-2"
            />
          </div>
          <div className="grid grid-cols-3 items-center gap-4">
            <Label htmlFor="hoursPerYear">Hours per year:</Label>
            <Input
              id="hoursPerYear"
              type="number"
              name="hoursPerYear"
              value={inputs.hoursPerYear}
              onChange={handleInputChange}
              placeholder="Hours per year"
              className="col-span-2"
            />
          </div>
          <Button onClick={calculateResults}>Calculate</Button>
        </div>

        {results && (
          <div className="mt-8 space-y-4">
            <h3 className="text-xl font-semibold">Results:</h3>
            <p>Total area to light: {results.areaLighting.toFixed(2)} m²</p>
            <p>Wall-plug efficacy: {results.wallPlugEfficacyUmolJ.toFixed(2)} μmol/J</p>
            <p>Wall-plug efficacy: {results.wallPlugEfficacyMolKwh.toFixed(2)} mol/kWh</p>
            <p>Coverage area per fixture: {results.coverageArea.toFixed(2)} m²</p>
            <p>Fixtures required: {results.fixturesRequired}</p>
            <p>Purchase cost: ${results.purchaseCost.toFixed(2)}</p>
            <p>Annual electricity cost: ${results.annualElectricityCost.toFixed(2)}</p>
            
            <div>
              <h4 className="text-lg font-semibold">Greenhouse Layout:</h4>
              <GreenhouseVisualization
                width={inputs.greenhouseWidth}
                length={inputs.greenhouseLength}
                fixturesPerRow={results.fixturesPerRow}
                fixturesPerColumn={results.fixturesPerColumn}
              />
              <p className="text-sm text-gray-600 mt-2">
                Each yellow dot represents a lighting fixture. The layout shows an approximate distribution of {results.fixturesRequired} fixtures.
              </p>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default GreenhouseLightingCalculator;
